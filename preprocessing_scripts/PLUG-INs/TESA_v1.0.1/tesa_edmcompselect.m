% tesa_edmcompselect() -applies a series of rules (determined by the
%                   user) to classify TMS-evoked muscle components and 
%                   presents the components one-by-one for manual
%                   clarification and then removes components selected as
%                   artifacts from the data. During the clarification step,
%                   users can re-classify components using a drop down
%                   menu. When satisfied, press enter (or any other button) to 
%                   continue to the next component. If a component is selected
%                   as an artifact using a rule, it is plotted as red, if
%                   neural it is plotted as blue.  Component numbers selected for
%                   removal are stored in the EEG structure =>
%                   EEG.edmBadComp.
% 
%                   Users are encouraged to report the settings used with
%                   this function in any publications.
% 
%                   Note that the component selection rules are intedended
%                   to work as a guide only, and each component must be
%                   manually checked and re-classified if necessary. The rule 
%                   thresholds can be adapted by the user and may differ 
%                   between datasets. There is no guarantee for the success
%                   of these rules in accurately classifying components.
%                   For further information on selecting components, please
%                   read:
%                   
%                   Rogasch NC et al. (2014) Removing artefacts from TMS-EEG 
%                   recordings using independent component analysis: Importance 
%                   for assessing prefrontal and motor cortex network
%                   properties. NeuroImage, 101:425-439               
%
% Usage:
%   >>  EEG = tesa_edmcompselect( EEG, A , S );
%   >>  EEG = tesa_edmcompselect( EEG, A , S , 'key1',value1... );
%
% Inputs:
%   EEG             - EEGLAB EEG structure
%   A               - component topography weights generated by tesa_edm
%   S               - component time courses generated by tesa_edm
% 
% Optional input pairs (varargin):
%   'comps',int     - int is an integer describing the number of components
%                   to perform selection on (e.g. first 10 components).
%                   Leave empty for all components. 
%                   Default: []
%   'figSize','str' - 'small' | 'medium' | 'large'; Determines the size of
%                   the figures that are plotted displaying the information
%                   on the components.
%                   Default: 'small'
%   'plotTimeX',[start,end] - vector with integers for plotting the
%                   component time course (in ms).
%                   Default: [-200,500]
%   'plotFreqX',[low,high] - vector with integers for plotting the
%                   frequency distribution of components (in Hz)
%                   Default: [1,100]
% 
% Optional input pairs for detecting artifact components (varargin):
%   
%   TMS-evoked muscle activity
%   This type of artifact is detected by comparing the mean absolute z
%   score of the component time course within a target window ('tmsMuscleWin') 
%   and the mean absolute z score across the entire component time course. A threhold is
%   set by the user for detection (e.g. 5 means the mean absolute z score in the target window
%   is 5 times larger than the mean absolute z score across the entire time course). 
%   Components are stored under tmsMuscle.
%   'tmsMuscle','str' - 'on' | 'off'. A string which turns on TMS-evoked muscle 
%                   activity detection. 
%                   Default: 'on'
%   'tmsMuscleThresh',int - An integer determining the threshold for
%                   detecting components representing TMS-evoked muscle activity.
%                   Default: 8
%   'tmsMuscleWin',[start,end] - a vector describing the target window for
%                   TMS-evoked muscle activity (in ms).
%                   Default: [11,30]
%   'tmsMuscleFeedback','str' - 'on' | 'off'. String turning on feedback
%                   of TMS-evoked muscle threshold value for each component
%                   in the command window.
%                   (Useful for determining a suitable threshold).
%                   Default: 'off'
% 
% 
% Outputs:
%   EEG             - EEGLAB EEG structure
%   badComp         - vector with components for removal
% 
% See also:
%   tesa_fastica, tesa_sortcomps 

% Copyright (C) 2016  Nigel Rogasch, Monash University,
% nigel.rogasch@monash.edu
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

function  badComp = tesa_edmcompselect( EEG , S, A ,varargin)
   
    if nargin < 1
        error('Not enough input arguments.');
    end

    %define defaults
    options = struct('comps',[], 'figSize','small','plotTimeX',[-200,500],'plotFreqX',[1,100],'tmsMuscle','on','tmsMuscleThresh',8,...
        'tmsMuscleWin',[11,30],'tmsMuscleFeedback','off');

    % read the acceptable names
    optionNames = fieldnames(options);

    % count arguments
    nArgs = length(varargin);
    if round(nArgs/2)~=nArgs/2
       error('EXAMPLE needs key/value pairs')
    end

    for pair = reshape(varargin,2,[]) % pair is {propName;propValue}
       inpName = pair{1}; % make case insensitive

       if any(strcmpi(inpName,optionNames))%looks for known options and replaces these in options
          options.(inpName) = pair{2};
       else
          error('%s is not a recognized parameter name',inpName)
       end
    end
          
    %Check comps input
    if ~isempty(options.comps)
        if size(S,1) < options.comps
            error('The number of components to choose from (%d) is more than the number of independent components in the data (%d).',options.comps,size(EEG.icaweights,1));
        end
    end
    
    %Check figure inputs
    if ~(strcmp(options.figSize,'small') | strcmp(options.figSize,'medium') | strcmp(options.figSize,'large'))
        error ('Input for ''figSize'' needs to be either ''small'', ''medium'' or ''large''.');
    end
    
    %Check plotTimeX inputs
    if size(options.plotTimeX,2) ~= 2
        error('Input for ''plotTimeX'' must be in the following format: [start, end]. e.g. [-200,500].');
    elseif options.plotTimeX(1,1) < EEG.times(1,1) || options.plotTimeX(1,2) > EEG.times(1,end)
        error('Input for ''plotTimeX'' must be within the limits of the data [%d to %d].',EEG.times(1,1),EEG.times(1,end));
    end
    
    %Check plotFreqX inputs
    if size(options.plotFreqX,2) ~= 2
        error('Input for ''plotFreqX'' must be in the following format: [low, high]. e.g. [1,100].');
    elseif options.plotFreqX(1,1)<0
        error('Input for ''plotFreqX'' must be larger than 0.');
    end
       
    %Creates output storage for components
    badComp = [];

    %Number of components to consider
    if isempty(options.comps)
        comps = size(S,1);
    else
        comps = options.comps;
    end

    for compNum =1:comps

        %##########
        %Output the data

        %Calculates time course
        temp = S(compNum,:,:);
        temp = squeeze(temp(1,:,:));

        %Calculates FFT (uV/Hz)
        T = 1/EEG.srate;             % Sample time
        L = size(EEG.times,2);       % Length of signal
        NFFT = 2^nextpow2(L);        % Next power of 2 from length of y
        f = EEG.srate/2*linspace(0,1,NFFT/2+1); % Frequencies

        y = reshape(temp,1,[]);
        Y = fft(zscore(y),NFFT)/L;

        Yout = (abs(Y).^2); 
        [c index]=min(abs(f-(0.5)));

        for x = 1:size(Yout,1);
            freq=options.plotFreqX(1,1):0.5:options.plotFreqX(1,2);
            for a=1:size(freq,2);
                [c index1]=min(abs(f-((freq(1,a)-0.25))));
                [c index2]=min(abs(f-((freq(1,a)+0.25))));
                Y2(x,a)=mean(Yout(x,index1:index2),2); %creates bins for 0.5 Hz in width centred around whole frequencies (i.e. 0.5, 1, 1.5 Hz etc)
            end;
        end;

        %##########
        %Checks which components fit profile of artefact

        %Calculates the zscores across electrodes for each component
        tempCompZ = zscore(A(:,compNum));

        %TMS-evoked muscle
        if strcmpi(options.tmsMuscle,'on')
            
            %Check TMS muscle inputs
            if options.tmsMuscleThresh < 0
                error('Input for ''tmsMuscleThresh'' must be greater than 0.');
            elseif size(options.tmsMuscleWin,2)~=2
                error('Input for ''tmsMusclesWin'' must be in the following format: [start,end]. e.g. [11,51].');
            elseif options.tmsMuscleWin(1,1) < EEG.times(1,1) || options.tmsMuscleWin(1,2) > EEG.times(1,end)
                error('Input for ''tmsMuscleWin'' must be within the limits of the data [%d to %d].',EEG.times(1,1),EEG.times(1,end));
            end
        end
                    
        [val1,mt1] = min(abs(EEG.times-options.tmsMuscleWin(1,1)));
        [val2,mt2] = min(abs(EEG.times-options.tmsMuscleWin(1,2)));
        muscleScore = abs(mean(temp,2));
        winScore = mean(muscleScore(mt1:mt2,:),1);
        tmsMuscleRatio = winScore./mean(muscleScore);
        if strcmpi(options.tmsMuscleFeedback,'on')
            fprintf('Comp. %d TMS-evoked muscle ratio is %s.\n', compNum,num2str(round(tmsMuscleRatio,2)));
        end
        
        %Select if component is artefact
        if strcmpi(options.tmsMuscle,'on') && tmsMuscleRatio >= options.tmsMuscleThresh
            compVal = 2;
        else
            compVal = 1;
        end
        
        %##########
        %Plots the figure

        %Decide colour of figure
        if compVal ~= 1
            colour = 'r'; % if artefact
        else
            colour = 'b'; % if not artefac
        end

        %Figure sizing
        if strcmpi(options.figSize,'small')
            sz = [560, 420]; % figure size
            popPos = [345, 185, 140, 50];
            popFont = 9;
            compPos = [115, 400, 100, 20];
            compFont = 12;
            varPos =  [340, 397, 150, 20];
            varFont = 9;
        elseif strcmpi(options.figSize,'medium')
            sz = [900, 600]; % figure size
            popPos = [560, 260, 210, 75];
            popFont = 14;
            compPos = [190, 565, 150, 30];
            compFont = 18;
            varPos =  [550, 560, 240, 30];
            varFont = 14;
        elseif strcmpi(options.figSize,'large')
            sz = [1200, 900]; % figure size
            popPos = [750, 400, 280, 100];
            popFont = 18;
            compPos = [250, 855, 200, 40];
            compFont = 24;
            varPos =  [740, 850, 300, 40];
            varFont = 18;
        end

        screensize = get(0,'ScreenSize');
        xpos = ceil((screensize(3)-sz(1))/2); % center figure horizontally
        ypos = ceil((screensize(4)-sz(2))/2); % center figure vertically

        f = figure('KeyPressFcn',@(obj,evt) 0);
        f.Position = [xpos ypos sz(1) sz(2)];

        %Plot time course
        subplot(2,2,1);
        plot(EEG.times,mean(temp,2),colour); grid on; hold on;
        plot([0 0], get(gca,'ylim'),'r--');
        set(gca,'Xlim', [options.plotTimeX(1,1), options.plotTimeX(1,2)]);
        xlabel('Time (ms)');
        ylabel('Amplitude (a.u.)');

        %Plot topoplot
        subplot(2,2,2);
        topoplot(A(:,compNum),EEG.chanlocs,'electrodes','off');
        colorbar

        %Plot time course matrix
        [val1,tp1] = min(abs(EEG.times-options.plotTimeX(1,1)));
        [val2,tp2] = min(abs(EEG.times-options.plotTimeX(1,2)));
        temp1 = temp(tp1:tp2,:);
        subplot(2,2,3);
        imagesc(temp1','XData', options.plotTimeX);
        caxis([-max(abs(temp1(:))), max(abs(temp1(:)))]);
        xlabel('Time (ms)');
        ylabel('Trials');

        subplot(2,2,4);
        plot(freq,Y2,colour);grid on;
        set(gca,'Xlim', options.plotFreqX);
        xlabel('Frequency (Hz)');
        ylabel('Power (\muV^{2}/Hz)');

        %Plot popup window
        popup = uicontrol('Style', 'popup',...
            'String', {'Neural - other','TMS-evoked muscle'},...
            'Position', popPos,...
            'Value',compVal,...
            'fontSize',popFont); 

        %Plot component number
        hT = uicontrol('style', 'text',... 
            'string', ['IC ', num2str(compNum), ' of ', num2str(size(A,2))],... 
            'position', compPos,...
            'BackgroundColor',f.Color,...
            'fontWeight','bold',...
            'fontSize',compFont);

        waitfor(gcf,'CurrentCharacter');
        curChar=uint8(get(gcf,'CurrentCharacter'));

        output = popup.Value;

        %Save components for removal
        if output == 2
            badComp(1,size(badComp,2)+1) = compNum;
        end

        close;
    end

end
