% tesa_interpdata()     - replaces removed data using interpolated data.
%                           Note that either tesa_removedata or
%                           pop_tesa_removedata must be ran prior to this function.
% Usage:
%   >>  EEG = tesa_interpdata( EEG, interpolation );
%   >>  EEG = tesa_interpdata( EEG, interpolation, interpWin );
%
% Inputs:
%   EEG                 - EEGLAB EEG structure
%   interpolatation     - string describing type of interpolation, either
%                           'linear' or 'cubic'
%   interpWin           - (optional) vector with times before and after
%                           artefact window for fitting cubic function. 
%                           default = [20,20];
%    
% Outputs:
%   EEG                 - EEGLAB EEG structure
% 
% Examples
%   EEG = tesa_interpdata( EEG, 'linear' ); %replaces missing data with linear interpolation. Linear function is fitted on data point before and after missing data.
%   EEG = tesa_interpdata( EEG, 'cubic', [50,50] ); %replaces mising data with cubic interpolation. Cubic is fitted on data 50 ms before and 50 ms after missing data
%
% See also:
%   tesa_removedata

% Copyright (C) 2016  Nigel Rogasch, Monash University,
% nigel.rogasch@monash.edu
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

% Change log:
% 15.6.2018: Changed function to work on both continuous and epoched data

function EEG = tesa_interpdata( EEG, interpolation, interpWin )

if nargin < 2
    error('Not enough input arguments.');
end

if nargin < 3
    interpWin = [20,20];
end

if isempty(interpWin)
    interpWin = [20,20];
end

%Check input for interpolation
if ~(strcmp(interpolation,'linear') || strcmp(interpolation,'cubic'))
    error('Interpolation input must be either linear or cubic');
end

%Check EEG structure for tmscut fields generated by tesa_removedata.m
if ~isfield(EEG,'tmscut')
    error('Artifact data not removed. Please run pop_tesa_removedata first.');
end

% %Check that tmscut fields generated by tesa_removedata.m contain data
% if isfield(EEG,'tmscut')
%     if isempty(EEG.tmscut(1).tmscut1) || isempty(EEG.tmscut(1).tmscut2)
%         error('Artifact removal time points do not contain data. Please re-run pop_tesa_removedata.');
%     end
% end

% %Check that tmscut fields include interpEvent
% for z = 1:size(EEG.tmscut,2)
%     if strcmp(EEG.tmscut(z).interpolated,'no')
%         eventTemp{x,1} = EEG.tmscut(z).cutEvent;
%     end
% end
%
% if sum(strcmp(interpEvent,eventTemp)) < 1
%     error('Artifact data not removed for event type ''%s''. Please run pop_tesa_removedata first.',interpEvent);
% end

%Check if data is continuous or epoched and replace data
if size(EEG.data,3) == 1 % Continuous data
    EEGtemp = EEG.data;
    EEGtimes = EEG.times;
    dataType = 'continuous';
elseif size(EEG.data,3) > 1 % Epoched data
    EEGtemp = reshape(EEG.data,size(EEG.data,1),[],1);
    EEGtimes = repmat(EEG.times,1,size(EEG.data,3));
    dataType = 'epoched';
end

% Event names
evNames = {EEG.event.type};

%Interpolate the missing data
if strcmp(interpolation,'linear') %linear interpolation
    
    for z = 1:size(EEG.tmscut,2)
        if strcmp(EEG.tmscut(z).interpolated,'no')
            
            % Extract name of events to cut around
            cutEvent = EEG.tmscut(z).cutEvent;
            
            % Find events
            for evx = 1:length(cutEvent)
                evLogTemp(:,evx) = double(strcmp(cutEvent{evx},evNames));
            end
            
            % Convet to logical
            evLog = sum(evLogTemp,2) > 0;
            
            % Extract latencies
            evLat = [EEG.event.latency];
            evLatOut = round(evLat(evLog));
            
            %fit linear function to data
            for b = 1:length(evLatOut)
                
                % Samples of missing data
                cutWin1 = evLatOut(1,b) + round(EEG.tmscut(z).cutTimesTMS(1,1)*(EEG.srate/1000));
                cutWin2 = evLatOut(1,b) + round(EEG.tmscut(z).cutTimesTMS(1,2)*(EEG.srate/1000));
                
                % Samples for interpolation
                tp1 = cutWin1-1;
                tp2 = cutWin2+1;

%               % Locked time ratio to 0 to prevent badly conditioned
%               warnings at high x values
                x(1,1) = 0; 
                x(1,2) = EEGtimes(tp2)-EEGtimes(tp1);
                
                interpData = [];
                for a = 1:size(EEG.data,1)
                    
                    %Extract data points before and after removed data
                    y(1,1) = EEGtemp(a,tp1);
                    y(1,2) = EEGtemp(a,tp2);
                    
                    %Fit linear function to data points
                    p = polyfit(x,y,1);
                    
                    %Interpolate missing data points
                    X = EEGtimes(1,cutWin1:cutWin2); %missing time points
                    X1 = (X - X(1,1))+(1000/EEG.srate); %align with zero
                    interpData(a,:) = polyval(p,X1);
                    
                    
                end
                
                %Insert interpolated data
                EEGtemp(:,cutWin1:cutWin2) = interpData;
                
            end
            
            %Re-format data
            if strcmp('continuous',dataType)
                EEG.data = EEGtemp;
            elseif strcmp('epoched',dataType)
                EEG.data = reshape(EEGtemp,size(EEG.data,1),size(EEG.data,2),[]);
            end
            
            %display message
            fprintf('Linear interpolation between %d ms and %d ms \n',EEG.tmscut(z).cutTimesTMS(1,1),EEG.tmscut(z).cutTimesTMS(1,2));
            
            %Indicate that interpolation has happened
            EEG.tmscut(z).interpolated = 'yes';
        end
    end
end

if strcmp(interpolation,'cubic') %cubic interpolation
    
    for z = 1:size(EEG.tmscut,2)
        if strcmp(EEG.tmscut(z).interpolated,'no')
            
            % Extract name of events to cut around
            cutEvent = EEG.tmscut(z).cutEvent;
            
            % Find events
            for evx = 1:length(cutEvent)
                evLogTemp(:,evx) = double(strcmp(cutEvent{evx},evNames));
            end
            
            % Convet to logical
            evLog = sum(evLogTemp,2) > 0;
            
            % Extract latencies
            evLat = [EEG.event.latency];
            evLatOut = round(evLat(evLog));
            
            %             %Checks whether data sampling rate has changed
            %             tp1 = []; tp2 = [];
            %             if isequal(EEG.srate,EEG.tmscut(z).srate)
            %                 tp1 = EEG.tmscut(z).tmscut1;
            %                 tp2 = EEG.tmscut(z).tmscut2;
            %             elseif ~isequal(EEG.srate,EEG.tmscut(z).srate)
            %                 [~,tp1] = min(abs(EEG.times-EEG.tmscut(z).cutTimesTMS(1,1)));
            %                 [~,tp2] = min(abs(EEG.times-EEG.tmscut(z).cutTimesTMS(1,2)));
            %             end
            
            %fit cubic function to data
            for b = 1:length(evLatOut)
                
                % Samples to cut before and after event
                cutN1 = round(EEG.tmscut(z).cutTimesTMS(1,1)*(EEG.srate/1000));
                cutN2 = round(EEG.tmscut(z).cutTimesTMS(1,2)*(EEG.srate/1000));
                
                % Samples of missing data
                cutWin1 = evLatOut(1,b) + cutN1;
                cutWin2 = evLatOut(1,b) + cutN2;
                
                %Convert interpWin to samples
                iW1 = round((interpWin(1,1)/1000)*EEG.srate);
                iW2 = round((interpWin(1,2)/1000)*EEG.srate);
                
                %Extract time points before and after removed data
                in1 = round(cutWin1-iW1); in2 = round(cutWin2+iW2);
                x1 = EEGtimes(1,in1:in2);
                x = x1 - x1(1,1); % shift to starting at zero to avoid badly conditioned polynomial warnings at high values of x
                
                % Remove time points from data
                [~,centreT] = min(abs(x1-EEGtimes(1,evLatOut(1,b))));
                TP1 = centreT + cutN1;
                TP2 = centreT + cutN2;
                X = x(:,TP1:TP2);
                x(:,TP1:TP2) = [];
                
                interpData = [];
                for a = 1:size(EEG.data,1)

                    %Extract data points before and after removed data
                    y = EEGtemp(a,in1:in2);
                    y(:,TP1:TP2) = [];
                    
                    %Fit cubic function to data points
                    p = polyfit(x,y,3);
                    
                    %Interpolate missing data points
%                     X = EEGtimes(1,cutWin1:cutWin2); %missing time points
                    interpData(a,:) = polyval(p,X);
                    test1 = polyval(p,x);
                    
                end
                
                %Insert interpolated data
                EEGtemp(:,cutWin1:cutWin2) = interpData;
                
            end
            
            if strcmp('continuous',dataType)
                EEG.data = EEGtemp;
            elseif strcmp('epoched',dataType)
                EEG.data = reshape(EEGtemp,size(EEG.data,1),size(EEG.data,2),[]);
            end
            
            %display message
            fprintf('Cubic interpolation between %d ms and %d ms \n',EEG.tmscut(z).cutTimesTMS(1,1),EEG.tmscut(z).cutTimesTMS(1,2));
            
        end
        
        %Indicate that interpolation has happened
        EEG.tmscut(z).interpolated = 'yes';
    end
end

end
