function mcode_str = wgeneratematlabcode(caller,fig,varargin)
%WGENERATEMATLABCODE Generate Matlab code.

%   M. Misiti, Y. Misiti, G. Oppenheim, J.M. Poggi 16-Mar-2011.
%   Last Revision: 27-Oct-2011.
%   Copyright 1995-2011 The MathWorks, Inc.

GD = guidata(fig);
figPROP = GD.WfigPROP;
figParent = figPROP.FigParent;

params = {};
switch caller
    %----------------------------------------------------------------------
    case 'dw1ddeno'
        blocPAR = 'DWAn1d_Par_Anal';
        blocTHR = 'thrDATA';
        [Wav_Nam,Lev_Anal] =  wmemtool('rmb',figParent,blocPAR,3:4);
        thrDATA = wmemtool('rmb',fig,blocTHR,1);
        % thrDATA = {xd,cxd,lxd,thrPar}
        thrParams = get_THRPAR(Lev_Anal,thrDATA{4});
        [~,meth,scal_alfa,sorh] = utthrw1d('get_LVL_par',fig);
        params = {Wav_Nam,Lev_Anal,thrParams,meth,scal_alfa,sorh};
	%----------------------------------------------------------------------
    case 'dw1dcomp'
        blocPAR = 'DWAn1d_Par_Anal';
        blocTHR = 'thrDATA';
        [Wav_Nam,Lev_Anal] =  wmemtool('rmb',figParent,blocPAR,3:4);
        thrDATA = wmemtool('rmb',fig,blocTHR,1);
        % thrDATA = {xd,cxd,lxd,thrPar}
        thrParams = get_THRPAR(Lev_Anal,thrDATA{4});
        [~,meth,scal_alfa,sorh] = utthrw1d('get_LVL_par',fig);
        params = {Wav_Nam,Lev_Anal,thrParams,meth,scal_alfa,sorh};
	%----------------------------------------------------------------------
    case 'sw1dtool'
        [Lev_Anal,Wav_Nam] = wmemtool('rmb',fig,'MB_1',6,7);
        thrStruct = utthrw1d('get',fig,'thrstruct');
        thrParams = {thrStruct(1:Lev_Anal).thrParams};
        [~,meth,alfa] = utthrw1d('get_LVL_par',fig);
        rad = wfindobj(fig,'Style','RadioButton');
        val = get(rad,'Value');
        idx = cat(1,val{:})==1;
        nam = get(rad(idx),'tag');
        sorh = lower(nam(1));       
        params = {Wav_Nam,Lev_Anal,thrParams,meth,alfa,sorh};
	%----------------------------------------------------------------------
    case 'wp1ddeno'
        blocPAR = 'WP1D_Par_Anal';
        blocTHR = 'thrDATA';
        [Wav_Nam,~,Ent_Nam,Ent_Par] = ...
            wmemtool('rmb',figParent,blocPAR,2:5);
        thrDATA = wmemtool('rmb',fig,blocTHR,1);
        % thrDATA = {C_Sig,C_Tree,[],threshold}
        WP_DEN_tree = thrDATA{2};
        [~,meth,threshold,sorh] = utthrwpd('get_GBL_par',fig);
        % [C_Sig,C_Tree] = wpdencmp(WP_Tree,thrParams{:});
        params = {Wav_Nam,Ent_Nam,Ent_Par,meth,...
            threshold,sorh,WP_DEN_tree};
	%----------------------------------------------------------------------
    case 'wp1dcomp'
        blocPAR = 'WP1D_Par_Anal';
        blocTHR = 'thrDATA';
        [Wav_Nam,~,Ent_Nam,Ent_Par] = ...
            wmemtool('rmb',figParent,blocPAR,2:5);
        thrDATA = wmemtool('rmb',fig,blocTHR,1);
        % thrDATA = {C_Sig,C_Tree,[],threshold}
        WP_CMP_tree = thrDATA{2};
        threshold   = thrDATA{4};
        [~,meth] = utthrgbl('get_GBL_par',fig);
        params = {Wav_Nam,Ent_Nam,Ent_Par,meth,threshold,WP_CMP_tree};
	%--------------------------------------------------------
    case 'dw2ddeno'
        blocPAR = 'DWAn2d_Par_Anal';
        blocTHR = 'thrDATA';
        [Wav_Nam,Lev_Anal] =  wmemtool('rmb',figParent,blocPAR,2:3);
        thrDATA = wmemtool('rmb',fig,blocTHR,1);
        % thrDATA = {xd,cxd,lxd,thrPar}{xc,cxc,lxc,valTHR}
        
        % Test for interval and level dependant thresholding.
        thrParams = get_THRPAR(Lev_Anal,thrDATA{4});
        
        [~,meth,scal_alfa,sorh] = utthrw2d('get_LVL_par',fig);
        params = {Wav_Nam,Lev_Anal,thrParams,meth,scal_alfa,sorh};
	%----------------------------------------------------------------------
    case 'dw2dcomp'
        blocPAR = 'DWAn2d_Par_Anal';
        blocTHR = 'thrDATA';
        % blocCMP = 'MB1_dw2dcomp';
        [Wav_Nam,Lev_Anal] =  wmemtool('rmb',figParent,blocPAR,2:3);
        thrDATA = wmemtool('rmb',fig,blocTHR,1);
        thrParams = get_THRPAR(Lev_Anal,thrDATA{4});
        R = size(thrParams,1);
        switch R
            case 1
                mode = 'gbl';
                [~,meth] = utthrgbl('get_GBL_par',fig);
            case 3 ,
                mode = 'lvd';
                [~,meth] = utthrw2d('get_LVL_par',fig);
        end
        params = {mode,Wav_Nam,Lev_Anal,thrParams,meth};
	%----------------------------------------------------------------------
    case 'sw2dtool'
        [Lev_Anal,Wav_Nam] = wmemtool('rmb',fig,'MB_1',7,8);
        valTHR = utthrw2d('get',fig,'allvalthr');
        valTHR = valTHR(:,1:Lev_Anal);
        [~,meth,alfa] = utthrw2d('get_LVL_par',fig);
        rad = wfindobj(fig,'Style','RadioButton');
        val = get(rad,'Value');
        idx = cat(1,val{:})==1;
        nam = get(rad(idx),'tag');
        sorh = lower(nam(1));       
        params = {Wav_Nam,Lev_Anal,valTHR,meth,alfa,sorh};
	%----------------------------------------------------------------------
    case 'wp2ddeno'
        blocPAR = 'WP2D_Par_Anal';
        blocTHR = 'thrDATA';
        [Wav_Nam,~,Ent_Nam,Ent_Par] = ...
            wmemtool('rmb',figParent,blocPAR,2:5);
        thrDATA = wmemtool('rmb',fig,blocTHR,1);
        % thrDATA = {C_Sig,C_Tree,[],threshold}
        WP_DEN_tree = thrDATA{2};
        [~,meth,threshold,sorh] = utthrwpd('get_GBL_par',fig);
        % [C_Sig,C_Tree] = wpdencmp(WP_Tree,thrParams{:});
        params = {Wav_Nam,Ent_Nam,Ent_Par,meth,...
            threshold,sorh,WP_DEN_tree};
	%----------------------------------------------------------------------
    case 'wp2dcomp'
        blocPAR = 'WP2D_Par_Anal';
        blocTHR = 'thrDATA';
        [Wav_Nam,~,Ent_Nam,Ent_Par] = ...
            wmemtool('rmb',figParent,blocPAR,2:5);
        thrDATA = wmemtool('rmb',fig,blocTHR,1);
        % thrDATA = {C_Sig,C_Tree,[],threshold}
        WP_CMP_tree = thrDATA{2};
        threshold   = thrDATA{4};
        [~,meth] = utthrgbl('get_GBL_par',fig);
        params = {Wav_Nam,Ent_Nam,Ent_Par,meth,threshold,WP_CMP_tree};
	%----------------------------------------------------------------------
end

local_str = make_MCODE(caller,params{:});
mcode_str = [];
for n = 1:length(local_str)
    mcode_str = [mcode_str,local_str{n},sprintf('\n')]; %#ok<AGROW>
end

%-------------------------------------------------------------------------%
function local_str = make_MCODE(caller,varargin)

DateSTR = getDateSTR;
switch caller
    %----------------------------------------------------------------------
    case 'dw1ddeno'
        [Wav_Nam,Lev_Anal,thrParams,meth,scal_alfa,sorh] = deal(varargin{:});
        thrSTR = get_THRSTR(Lev_Anal,thrParams);
        if isnumeric(scal_alfa) , scal_alfa = int2str(scal_alfa); end
        ParamSTR = getParamSTR('vden');
        local_str = {...
            'function sigDEN = func_denoise_dw1d(SIG)', ...
            '% FUNC_DENOISE_DW1D Saved Denoising Process.', ...
            ParamSTR{:}, ...
            DateSTR{:}, ...            
            ' ', ...
            '% Analysis parameters. ', ...
            '%--------------------- ', ...
            ['wname = ''' Wav_Nam ''';'], ...
            ['level = '  int2str(Lev_Anal) ';'], ...
            ' ', ...
            '% Denoising parameters. ', ...
            '%---------------------- ', ...
            ['% meth = '''  meth ''';'], ...
            ['% scal_or_alfa = ' scal_alfa ';'],...
            ['sorh = '''  sorh ''';' getComment('sorh')], ...
            thrSTR, ...
            ' ', ...
            '% Denoise using CMDDENOISE.', ...
            '%-------------------------- ', ...
            'sigDEN = cmddenoise(SIG,wname,level,sorh,NaN,thrSettings);' ...
            };
	%----------------------------------------------------------------------
    case 'dw1dcomp'
        [Wav_Nam,Lev_Anal,thrParams,meth,scal_alfa,sorh] = deal(varargin{:});
        thrSTR = get_THRSTR(Lev_Anal,thrParams);
        ParamSTR = getParamSTR('vcmp');
        local_str = {...
            'function SIGCMP = func_compress_dw1d(SIG)', ...
            '% FUNC_COMPRESS_DW1D Saved Compression Process.', ...
            ParamSTR{:}, ...            
            DateSTR{:}, ...            
            ' ', ...
            '% Analysis parameters. ', ...
            '%--------------------- ', ...
            ['wname = ''' Wav_Nam ''';'], ...
            ['level = '  int2str(Lev_Anal) ';'], ...
            ' ', ...
            '% Compression parameters. ', ...
            '%------------------------ ', ...
            ['% meth = '''  meth ''';'], ...
            ['% scal_OR_alfa = ' num2str(scal_alfa) ';'],...
            ['sorh = '''  sorh ''';' getComment('sorh')] ...
            thrSTR, ...
            ' ', ...
            '% Compress using CMDDENOISE.', ...
            '%--------------------------- ', ...
            'SIGCMP = cmddenoise(SIG,wname,level,sorh,NaN,thrSettings);' ...
            };
	%----------------------------------------------------------------------
    case 'sw1dtool'
        [Wav_Nam,Lev_Anal,thrParams,meth,alfa,sorh] = deal(varargin{:});
        thrSTR = get_THRSTR(Lev_Anal,thrParams);
        ParamSTR = getParamSTR('svden');
        local_str = {...
            'function [sigDEN,wDEC] = func_denoise_sw1d(SIG)', ...
            '% FUNC_DENOISE_SW1D Saved Denoising Process.', ...
            ParamSTR{:}, ...
            DateSTR{:}, ...
            ' ', ...
            '% Analysis parameters. ', ...
            '%--------------------- ', ...
            ['wname = ''' Wav_Nam ''';'], ...
            ['level = '  int2str(Lev_Anal) ';'], ...
            ' ', ...
            '% Denoising parameters. ', ...
            '%---------------------- ', ...
            ['% meth = '''  meth ''';'], ...
            ['% scal_OR_alfa = ' alfa ';'],...
            ['sorh = '''  sorh ''';' getComment('sorh')] ...
            thrSTR, ...
            ' ', ...
            '% Decompose using SWT.', ...
            '%---------------------', ...
            'wDEC = swt(SIG,level,wname);', ...
            ' ', ...
            '% Denoise.', ...
            '%---------', ...
            'len = length(SIG);', ...
            'for k = 1:level', ...
            '    thr_par = thrSettings{k};', ...
            '    if ~isempty(thr_par)', ...
            '        NB_int = size(thr_par,1);', ...
            '        x      = [thr_par(:,1) ; thr_par(NB_int,2)];', ...
            '        x      = round(x);', ...
            '        x(x<1) = 1;', ...
            '        x(x>len) = len;', ...
            '        thr = thr_par(:,3);', ...
            '        for j = 1:NB_int', ...
            '            if j==1 , d_beg = 0; else d_beg = 1; end', ...
            '            j_beg = x(j)+d_beg;', ...
            '            j_end = x(j+1);', ...
            '            j_ind = (j_beg:j_end);', ...
            '            wDEC(k,j_ind) = wthresh(wDEC(k,j_ind),sorh,thr(j));', ...
            '        end', ...
            '    end', ...
            'end', ...
            ' ', ...
            '% Reconstruct the denoise signal using ISWT.', ...
            '%-------------------------------------------', ...
            'sigDEN = iswt(wDEC,wname);'  ...
            };
	%---------------------------------------------------------------------
    case 'wp1ddeno'
        [Wav_Nam,Ent_Nam,Ent_Par,meth,threshold,sorh,...
            WP_DEN_tree] = deal(varargin{:});
        Lev_Anal = treedpth(WP_DEN_tree);
        thrSTR = num2str(threshold,'%23.15f');
        dp = tnodes(WP_DEN_tree,'dp');
        idxn2m = dp(:,1)<Lev_Anal;
        tn = tnodes(WP_DEN_tree);
        n2m = tn(idxn2m);
        ParamSTR = getParamSTR('wpvden');
        local_str = {...
            'function [sigDEN,wptDEN] = func_denoise_wp1d(SIG)', ...
            '% FUNC_DENOISE_WP1D Saved Denoising Process.', ...
            ParamSTR{:}, ...
            DateSTR{:}, ...            
            ' ', ...
            '% Analysis parameters.', ...
            '%---------------------', ...
            ['Wav_Nam = ''' Wav_Nam ''';'], ...
            ['Lev_Anal = '  int2str(Lev_Anal) ';'], ...
            ['Ent_Nam = ''' Ent_Nam ''';'], ...
            ['Ent_Par = '  num2str(Ent_Par) ';'], ...
            ' ', ...
            '% Denoising parameters. ', ...
            '%---------------------- ', ...
            ['% meth = '''  meth ''';'], ...
            ['sorh = '''  sorh ''';' getComment('sorh')] ...
            ['thrSettings = {sorh,''nobest'',' thrSTR ',1};'], ...
            ' ', ...
            '% Decompose using WPDEC.', ...
            '%----------------------', ...
            'wpt = wpdec(SIG,Lev_Anal,Wav_Nam,Ent_Nam,Ent_Par);', ...
            ' ', ...
            ' % Nodes to merge.', ...
            '%-----------------', ...
            ['n2m = [' int2str(n2m') '];'], ...
            'for j = 1:length(n2m)' , ...
            '    wpt = wpjoin(wpt,n2m(j));', ...
            'end', ...
            ' ', ...
            '% Denoise using WPDENCMP.', ...
            '%------------------------ ', ...
            '[sigDEN,wptDEN] = wpdencmp(wpt,thrSettings{:});' ...
            };
	%----------------------------------------------------------------------
    case 'wp1dcomp'
        [Wav_Nam,Ent_Nam,Ent_Par,meth,threshold,WP_CMP_tree]= ...
            deal(varargin{:});
        Lev_Anal = treedpth(WP_CMP_tree);
        thrSTR = num2str(threshold,'%23.15f');
        dp = tnodes(WP_CMP_tree,'dp');
        idxn2m = dp(:,1)<Lev_Anal;
        tn = tnodes(WP_CMP_tree);
        n2m = tn(idxn2m);
        ParamSTR = getParamSTR('wpvcmp');                
        local_str = {...
            'function [sigCMP,wptCMP] = func_compress_wp1d(SIG)', ...
            '% FUNC_COMPRESS_WP1D Saved Compression Process.', ...
            ParamSTR{:}, ...
            DateSTR{:}, ...            
            ' ', ...
            '% Analysis parameters. ', ...
            '%--------------------- ', ...
            ['Wav_Nam = ''' Wav_Nam ''';'], ...
            ['Lev_Anal = '  int2str(Lev_Anal) ';'], ...
            ['Ent_Nam = ''' Ent_Nam ''';'], ...
            ['Ent_Par = '  num2str(Ent_Par) ';'], ...
            ' ', ...
            '% Compression parameters. ', ...
            '%----------------------- ', ...
            ['% meth = '''  meth ''';'], ...
            ['thrSettings = {''h'',''nobest'',' thrSTR ',1};'], ...
            ' ', ...
            '% Decompose using WPDEC.', ...
            '%----------------------', ...
            'wpt = wpdec(SIG,Lev_Anal,Wav_Nam,Ent_Nam,Ent_Par);', ...
            ' ', ...
            ' % Nodes to merge.', ...
            '%-----------------', ...
            ['n2m = [' int2str(n2m') '];'], ...
            'for j = 1:length(n2m)' , ...
            '    wpt = wpjoin(wpt,n2m(j));', ...
            'end', ...
            ' ', ...
            '% Compression using WPDENCMP.', ...
            '%---------------------------- ', ...
            '[sigCMP,wptCMP] = wpdencmp(wpt,thrSettings{:});' ...
            };
	%----------------------------------------------------------------------
    case 'dw2ddeno'
        [Wav_Nam,Lev_Anal,thrParams,meth,scal_alfa,sorh] = deal(varargin{:});
        thrSTR = get_THRSTR(Lev_Anal,thrParams);
        ParamSTR = getParamSTR('mden');
        local_str = {...
            'function [XDEN,cfsDEN,dimCFS] = func_denoise_dw2d(X)', ...
            '% FUNC_DENOISE_DW2D Saved Denoising Process.', ...
            ParamSTR{:}, ...            
            DateSTR{:}, ...
            ' ', ...
            '% Analysis parameters. ', ...
            '%--------------------- ', ...
            ['wname = ''' Wav_Nam ''';'], ...
            ['level = '  int2str(Lev_Anal) ';'], ...
            ' ', ...
            '% Denoising parameters. ', ...
            '%----------------------- ', ...
            ['% meth = '''  meth ''';'], ...
            ['% scal_OR_alfa = ' scal_alfa ';'],...
            ['sorh = '''  sorh ''';' getComment('sorh')] ...
            thrSTR, ...
            'roundFLAG = true;', ...            
            ' ', ...
            '% Denoise using WDENCMP.', ...
            '%---------------------- ', ...
            '[coefs,sizes] = wavedec2(X,level,wname);', ...
            '[XDEN,cfsDEN,dimCFS] = wdencmp(''lvd'',coefs,sizes, ...' , ...
            [blanks(4) 'wname,level,thrSettings,sorh);'],  ...
            'if roundFLAG , XDEN = round(XDEN); end' ,...
            'if isequal(class(X),''uint8'') , XDEN = uint8(XDEN); end'            
            };
	%----------------------------------------------------------------------
    case 'dw2dcomp'
        [mode,Wav_Nam,Lev_Anal,thrParams,meth] = deal(varargin{:});
        sorh = 'h';
        thrSTR = get_THRSTR(Lev_Anal,thrParams);
        str_CMP_CMD_1 = ...
            ['[XCMP,cfsCMP,dimCFS] = wdencmp(''' mode ''',coefs,sizes, ...'];
        str_CMP_CMD_2 = [blanks(4) 'wname,level,thrSettings,sorh' ];
        switch mode
            case 'gbl' , str_CMP_CMD_2 = [str_CMP_CMD_2 ',1);'];
            case 'lvd' , str_CMP_CMD_2 = [str_CMP_CMD_2 ');' ];
        end
        ParamSTR = getParamSTR('mcmp');
        local_str = {...
            'function [XCMP,cfsCMP,dimCFS] = func_compress_dw2d(X)', ...
            '% FUNC_COMPRESS_DW2D Saved Compression Process.', ...
            ParamSTR{:}, ...
            DateSTR{:}, ...
            ' ', ...
            '% Analysis parameters. ', ...
            '%--------------------- ', ...
            ['wname = ''' Wav_Nam ''';'], ...
            ['level = '  int2str(Lev_Anal) ';'], ...
            ' ', ...
            '% Compression parameters. ', ...
            '%------------------------ ', ...
            ['% meth = '''  meth ''';'], ...
            ['sorh = '''  sorh ''';' getComment('sorh')] ...
            thrSTR, ...
            'roundFLAG = true;', ...
            ' ', ...
            '% Compression using WDENCMP.', ...
            '%-------------------------- ', ...
            '[coefs,sizes] = wavedec2(X,level,wname);', ...
            str_CMP_CMD_1, ...
            str_CMP_CMD_2,  ...
            'if roundFLAG , XCMP = round(XCMP); end' ,...
            'if isequal(class(X),''uint8'') , XCMP = uint8(XCMP); end'            
            };
	%----------------------------------------------------------------------
    case 'sw2dtool'
        [Wav_Nam,Lev_Anal,thrParams,meth,alfa,sorh] = deal(varargin{:});
        thrSTR = get_THRSTR(Lev_Anal,thrParams);
        if isnumeric(alfa) , alfa = int2str(alfa); end
        ParamSTR = getParamSTR('smden');
        local_str = {...
            'function [XDEN,wDEC] = func_denoise_sw2d(X)', ...
            '% FUNC_DENOISE_SW2D Saved Denoising Process.', ...
            ParamSTR{:}, ...
            DateSTR{:}, ...
            ' ', ...
            '% Analysis parameters. ', ...
            '%--------------------- ', ...
            ['wname = ''' Wav_Nam ''';'], ...
            ['level = ' int2str(Lev_Anal) ';'], ...
            ' ', ...
            '% Denoising parameters. ', ...
            '%----------------------- ', ...
            ['% meth = '''  meth ''';'], ...
            ['% scal_OR_alfa = ' alfa ';'],...
            ['sorh = '''  sorh ''';' getComment('sorh')] ...
            thrSTR, ...
            'roundFLAG = false;', ...
            ' ', ...
            '% Decompose using SWT2.', ...
            '%---------------------', ...
            'wDEC = swt2(X,level,wname);', ...
            ' ', ...
            '% Denoise.', ...
            '%---------', ...
            'permDir = [1 3 2];', ...
            'for j = 1:level', ...
            '    for kk=1:3', ...
            '        ind = (permDir(kk)-1)*level+j;', ...
            '        thr = thrSettings(kk,j);', ...
            '        wDEC(:,:,ind) = wthresh(wDEC(:,:,ind),sorh,thr);', ...
            '    end', ...
            'end', ...
            ' ', ...
            '% Reconstruct the denoise signal using ISWT2.', ...
            '%-------------------------------------------' , ...            
            'XDEN = iswt2(wDEC,wname);', ...
            'if roundFLAG , XDEN = round(XDEN); end' ...
            };
	%----------------------------------------------------------------------
    case 'wp2ddeno'
        [Wav_Nam,Ent_Nam,Ent_Par,meth,threshold,sorh,...
            WP_DEN_tree] = deal(varargin{:});
        Lev_Anal = treedpth(WP_DEN_tree);
        thrSTR = num2str(threshold,'%23.15f');
        dp = tnodes(WP_DEN_tree,'dp');
        idxn2m = dp(:,1)<Lev_Anal;
        tn = tnodes(WP_DEN_tree);
        n2m = tn(idxn2m);
        ParamSTR = getParamSTR('wpmden');
        local_str = {...
            'function [XDEN,wptDEN] = func_denoise_wp2d(X)', ...
            '% FUNC_DENOISE_WP2D Saved Denoising Process.', ...
            ParamSTR{:}, ...
            DateSTR{:}, ...
            ' ', ...
            '% Analysis parameters. ', ...
            '%--------------------- ', ...
            ['Wav_Nam = ''' Wav_Nam ''';'], ...
            ['Lev_Anal = '  int2str(Lev_Anal) ';'], ...
            ['Ent_Nam = ''' Ent_Nam ''';'], ...
            ['Ent_Par = '  num2str(Ent_Par) ';'], ...
            ' ', ...
            '% Denoising parameters. ', ...
            '%----------------------- ', ...
            ['% meth = '''  meth ''';'], ...
            ['sorh = '''  sorh ''';' getComment('sorh')], ...
            ['thrSettings = {sorh,''nobest'',' thrSTR ',1};'], ...
            'roundFLAG = true;', ...
            ' ', ...
            '% Decompose using WPDEC2.', ...
            '%-----------------------', ...
            'wpt = wpdec2(X,Lev_Anal,Wav_Nam,Ent_Nam,Ent_Par);', ...
            ' ', ...
            ' % Nodes to merge.', ...
            '%-----------------', ...
            ['n2m = [' int2str(n2m') '];'], ...
            'for j = 1:length(n2m)' , ...
            '    wpt = wpjoin(wpt,n2m(j));', ...
            'end', ...
            ' ', ...
            '% Denoise using WPDENCMP.', ...
            '%------------------------ ', ...
            '[XDEN,wptDEN] = wpdencmp(wpt,thrSettings{:});', ...
            'if roundFLAG , XDEN = round(XDEN); end' ,...
            'if isequal(class(X),''uint8'') , XDEN = uint8(XDEN); end'
            };        
	%----------------------------------------------------------------------
    case 'wp2dcomp'
        [Wav_Nam,Ent_Nam,Ent_Par,meth,threshold,WP_CMP_tree]= ...
            deal(varargin{:});
        Lev_Anal = treedpth(WP_CMP_tree);
        thrSTR = num2str(threshold,'%23.15f');
        dp = tnodes(WP_CMP_tree,'dp');
        idxn2m = dp(:,1)<Lev_Anal;
        tn = tnodes(WP_CMP_tree);
        n2m = tn(idxn2m);
        ParamSTR = getParamSTR('wpmcmp');
        local_str = {...
            'function [XCMP,wptCMP] = func_compress_wp2d(X)', ...
            '% FUNC_COMPRESS_WP2D Saved Compression Process.', ...
            ParamSTR{:}, ...
            DateSTR{:}, ...
            ' ', ...
            '% Analysis parameters. ', ...
            '%--------------------- ', ...
            ['Wav_Nam = ''' Wav_Nam ''';'], ...
            ['Lev_Anal = '  int2str(Lev_Anal) ';'], ...
            ['Ent_Nam = ''' Ent_Nam ''';'], ...
            ['Ent_Par = '  num2str(Ent_Par) ';'], ...
            ' ', ...
            '% Compression parameters. ', ...
            '%----------------------- ', ...
            ['% meth = '''  meth ''';'], ...
            ['sorh = ''h'';' getComment('sorh')], ...            
            ['thrSettings = {sorh,''nobest'',' thrSTR ',1};'], ...
            'roundFLAG = true;', ...
            ' ', ...
            '% Decompose using WPDEC2.', ...
            '%-----------------------', ...
            'wpt = wpdec2(X,Lev_Anal,Wav_Nam,Ent_Nam,Ent_Par);', ...
            ' ', ...
            ' % Nodes to merge.', ...
            '%-----------------', ...
            ['n2m = [' int2str(n2m') '];'], ...
            'for j = 1:length(n2m)' , ...
            '    wpt = wpjoin(wpt,n2m(j));', ...
            'end', ...
            ' ', ...
            '% Compression using WPDENCMP.', ...
            '%---------------------------- ', ...
            '[XCMP,wptCMP] = wpdencmp(wpt,thrSettings{:});', ...
            'if roundFLAG , XCMP = round(XCMP); end' ,...
            'if isequal(class(X),''uint8'') , XCMP = uint8(XCMP); end'            
            };
	%----------------------------------------------------------------------    
end


%-------------------------------------------------------------------------%
function thrParams = get_THRPAR(Lev_Anal,thrParams)

if ~iscell(thrParams) , return; end

% Test for interval dependant thresholding.
for k = 1:Lev_Anal
    one_INTER = size(thrParams{k},1)==1;
    if isequal(one_INTER,false) , break; end
end
if one_INTER
    thrParams = cat(1,thrParams{:});
    thrParams = thrParams(:,3);
end

% Test for level dependant thresholding.
one_LEVEL = true;
V0 = thrParams(1);
for k = 2:Lev_Anal
    if ~isequal(V0,thrParams(k))
        one_LEVEL = false;
        break
    end
end
if one_LEVEL , thrParams = thrParams(1); end
%-------------------------------------------------------------------------%
function thrSTR = get_THRSTR(Lev_Anal,thrParams)

if iscell(thrParams)
    for k = 1:Lev_Anal
        AA = [];
        SS = num2str(thrParams{k},'%23.15f');
        nbRow = size(SS,1);
        SS = [repmat(' ',nbRow,8) , SS];
        for j = 1:nbRow
            AA = [AA , SS(j,:) '; ... ' , sprintf('\n')];
        end
        IndentSTR = repmat(' ',1,4);
        thrSTR{k} = ...
            [IndentSTR , '[... ' sprintf('\n') , AA , ...
             IndentSTR , ']; ...' sprintf('\n')];
    end
    thrSTR = ['thrSettings =  {...', sprintf('\n'), thrSTR{:} , ' };'];
    
elseif isequal(length(thrParams),1)
    thrSTR = ['thrSettings = ' num2str(thrParams,'%23.15f') ';'];
    
else
    IndentSTR = repmat(' ',1,4);
    SS = num2str(thrParams,'%23.15f');
    AA = [];
    nbROW = size(SS,1);
    for j = 1:nbROW
        if j<nbROW , addSTR = ' ; ... '; else addSTR = '   ... '; end
        AA = [AA , IndentSTR , SS(j,:) , addSTR , sprintf('\n')];
    end
    thrSTR = ['thrSettings =  [... ', sprintf('\n'), AA , ' ];'];
end
%-------------------------------------------------------------------------%
function strDate = getDateSTR

%  Auto-generated by Wavelet Toolbox on 
AstrDate = ['%  Auto-generated by Wavelet Toolbox on ' datestr(now,0)];
strDate = {' ',AstrDate};
%-------------------------------------------------------------------------%
function comment = getComment(type)

switch type
    case 'sorh' , comment ='    % Specified soft or hard thresholding';
    case 'scal' , comment ='    % Rescaling method';
end
%-------------------------------------------------------------------------%
function strParam = getParamSTR(type)

switch type
    case {'vden','svden','wpvden'}
        strParam = {...
            '%   SIG: vector of data',...
            '%   -------------------', ...
            '%   sigDEN: vector of denoised data'};
        if isequal(type,'wpvden')
            strParam = {strParam{:}, ...
                '%   wptDEN: wavelet packet decomposition (wptree object)'};
        elseif isequal(type,'svden')
            strParam = {strParam{:}, ...
                '%   wDEC: stationary wavelet decomposition'};
        end
        
    case {'vcmp','wpvcmp'}
        strParam = {...
            '%   SIG: vector of data',...
            '%   -------------------', ...            
            '%   sigCMP: vector of compressed data'};
        if isequal(type,'wpvcmp')
            strParam = {strParam{:},...
                '%   wptCMP: wavelet packet decomposition (wptree object)'};
        end
        
    case {'mden','smden','wpmden'}
        strParam = {...
            '%   X: matrix of data',...
            '%   -----------------', ...            
            '%   XDEN: matrix of denoised data'};
        if isequal(type,'wpmden')
            strParam = {strParam{:},...
                '%   wptDEN: wavelet packet decomposition (wptree object)'};
        elseif isequal(type,'smden')
            strParam = {strParam{:}, ...
                '%   wDEC: stationary wavelet decomposition'};
        else
            strParam = {strParam{:}, ...
                '%   cfsDEN: decomposition vector (see WAVEDEC2)' , ...
                '%   dimCFS: corresponding bookkeeping matrix'   ...                
                };
        end
            
    case {'mcmp','wpmcmp'}
        strParam = {...
            '%   X: matrix of data',...
            '%   -----------------', ...            
            '%   XCMP: matrix of compressed data'};
        if isequal(type,'wpmcmp')
            strParam = {strParam{:},...
                '%   wptCMP: wavelet packet decomposition (wptree object)'};
        else
            strParam = {strParam{:}, ...
                '%   cfsCMP: decomposition vector (see WAVEDEC2)' , ...
                '%   dimCFS: corresponding bookkeeping matrix'   ...                
                };
        end
end
%-------------------------------------------------------------------------%
